# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import eventsourcing.system.grpc.processor_pb2 as processor__pb2


class ProcessorStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/processor.Processor/Ping',
                request_serializer=processor__pb2.Empty.SerializeToString,
                response_deserializer=processor__pb2.Empty.FromString,
                )
        self.Follow = channel.unary_unary(
                '/processor.Processor/Follow',
                request_serializer=processor__pb2.FollowRequest.SerializeToString,
                response_deserializer=processor__pb2.Empty.FromString,
                )
        self.Lead = channel.unary_unary(
                '/processor.Processor/Lead',
                request_serializer=processor__pb2.LeadRequest.SerializeToString,
                response_deserializer=processor__pb2.Empty.FromString,
                )
        self.Prompt = channel.unary_unary(
                '/processor.Processor/Prompt',
                request_serializer=processor__pb2.PromptRequest.SerializeToString,
                response_deserializer=processor__pb2.Empty.FromString,
                )
        self.GetNotifications = channel.unary_unary(
                '/processor.Processor/GetNotifications',
                request_serializer=processor__pb2.NotificationsRequest.SerializeToString,
                response_deserializer=processor__pb2.NotificationsReply.FromString,
                )
        self.CallApplicationMethod = channel.unary_unary(
                '/processor.Processor/CallApplicationMethod',
                request_serializer=processor__pb2.CallRequest.SerializeToString,
                response_deserializer=processor__pb2.CallReply.FromString,
                )


class ProcessorServicer(object):
    """Missing associated documentation comment in .proto file"""

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Follow(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Lead(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Prompt(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNotifications(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CallApplicationMethod(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProcessorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=processor__pb2.Empty.FromString,
                    response_serializer=processor__pb2.Empty.SerializeToString,
            ),
            'Follow': grpc.unary_unary_rpc_method_handler(
                    servicer.Follow,
                    request_deserializer=processor__pb2.FollowRequest.FromString,
                    response_serializer=processor__pb2.Empty.SerializeToString,
            ),
            'Lead': grpc.unary_unary_rpc_method_handler(
                    servicer.Lead,
                    request_deserializer=processor__pb2.LeadRequest.FromString,
                    response_serializer=processor__pb2.Empty.SerializeToString,
            ),
            'Prompt': grpc.unary_unary_rpc_method_handler(
                    servicer.Prompt,
                    request_deserializer=processor__pb2.PromptRequest.FromString,
                    response_serializer=processor__pb2.Empty.SerializeToString,
            ),
            'GetNotifications': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNotifications,
                    request_deserializer=processor__pb2.NotificationsRequest.FromString,
                    response_serializer=processor__pb2.NotificationsReply.SerializeToString,
            ),
            'CallApplicationMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.CallApplicationMethod,
                    request_deserializer=processor__pb2.CallRequest.FromString,
                    response_serializer=processor__pb2.CallReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'processor.Processor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Processor(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/processor.Processor/Ping',
            processor__pb2.Empty.SerializeToString,
            processor__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Follow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/processor.Processor/Follow',
            processor__pb2.FollowRequest.SerializeToString,
            processor__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Lead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/processor.Processor/Lead',
            processor__pb2.LeadRequest.SerializeToString,
            processor__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Prompt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/processor.Processor/Prompt',
            processor__pb2.PromptRequest.SerializeToString,
            processor__pb2.Empty.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNotifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/processor.Processor/GetNotifications',
            processor__pb2.NotificationsRequest.SerializeToString,
            processor__pb2.NotificationsReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CallApplicationMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/processor.Processor/CallApplicationMethod',
            processor__pb2.CallRequest.SerializeToString,
            processor__pb2.CallReply.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
